// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCatalyst extends ethereum.Event {
  get params(): AddCatalyst__Params {
    return new AddCatalyst__Params(this);
  }
}

export class AddCatalyst__Params {
  _event: AddCatalyst;

  constructor(event: AddCatalyst) {
    this._event = event;
  }

  get _id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _domain(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class RemoveCatalyst extends ethereum.Event {
  get params(): RemoveCatalyst__Params {
    return new RemoveCatalyst__Params(this);
  }
}

export class RemoveCatalyst__Params {
  _event: RemoveCatalyst;

  constructor(event: RemoveCatalyst) {
    this._event = event;
  }

  get _id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _domain(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Catalyst__catalystByIdResult {
  value0: Bytes;
  value1: Address;
  value2: string;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: string,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getId(): Bytes {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getDomain(): string {
    return this.value2;
  }

  getStartTime(): BigInt {
    return this.value3;
  }

  getEndTime(): BigInt {
    return this.value4;
  }
}

export class Catalyst extends ethereum.SmartContract {
  static bind(address: Address): Catalyst {
    return new Catalyst("Catalyst", address);
  }

  owners(param0: Address): boolean {
    let result = super.call("owners", "owners(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_owners(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("owners", "owners(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  catalystCount(): BigInt {
    let result = super.call("catalystCount", "catalystCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_catalystCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "catalystCount",
      "catalystCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  catalystIndexById(param0: Bytes): BigInt {
    let result = super.call(
      "catalystIndexById",
      "catalystIndexById(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_catalystIndexById(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "catalystIndexById",
      "catalystIndexById(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  catalystOwner(_id: Bytes): Address {
    let result = super.call(
      "catalystOwner",
      "catalystOwner(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_id)]
    );

    return result[0].toAddress();
  }

  try_catalystOwner(_id: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "catalystOwner",
      "catalystOwner(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  catalystDomain(_id: Bytes): string {
    let result = super.call(
      "catalystDomain",
      "catalystDomain(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(_id)]
    );

    return result[0].toString();
  }

  try_catalystDomain(_id: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "catalystDomain",
      "catalystDomain(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  catalystIds(param0: BigInt): Bytes {
    let result = super.call("catalystIds", "catalystIds(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_catalystIds(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "catalystIds",
      "catalystIds(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  domains(param0: Bytes): boolean {
    let result = super.call("domains", "domains(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_domains(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("domains", "domains(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  catalystById(param0: Bytes): Catalyst__catalystByIdResult {
    let result = super.call(
      "catalystById",
      "catalystById(bytes32):(bytes32,address,string,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Catalyst__catalystByIdResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_catalystById(
    param0: Bytes
  ): ethereum.CallResult<Catalyst__catalystByIdResult> {
    let result = super.tryCall(
      "catalystById",
      "catalystById(bytes32):(bytes32,address,string,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Catalyst__catalystByIdResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  MODIFY_ROLE(): Bytes {
    let result = super.call("MODIFY_ROLE", "MODIFY_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MODIFY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MODIFY_ROLE", "MODIFY_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class RemoveCatalystCall extends ethereum.Call {
  get inputs(): RemoveCatalystCall__Inputs {
    return new RemoveCatalystCall__Inputs(this);
  }

  get outputs(): RemoveCatalystCall__Outputs {
    return new RemoveCatalystCall__Outputs(this);
  }
}

export class RemoveCatalystCall__Inputs {
  _call: RemoveCatalystCall;

  constructor(call: RemoveCatalystCall) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveCatalystCall__Outputs {
  _call: RemoveCatalystCall;

  constructor(call: RemoveCatalystCall) {
    this._call = call;
  }
}

export class AddCatalystCall extends ethereum.Call {
  get inputs(): AddCatalystCall__Inputs {
    return new AddCatalystCall__Inputs(this);
  }

  get outputs(): AddCatalystCall__Outputs {
    return new AddCatalystCall__Outputs(this);
  }
}

export class AddCatalystCall__Inputs {
  _call: AddCatalystCall;

  constructor(call: AddCatalystCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _domain(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddCatalystCall__Outputs {
  _call: AddCatalystCall;

  constructor(call: AddCatalystCall) {
    this._call = call;
  }
}
